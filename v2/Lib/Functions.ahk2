;Cross use functions
;2018-10-10

;#####################################################################################
;Conversions

HexToDec(hexVal){  ;Base 16 to base 10
	Return hexVal
}

;RGBToHex(Red,Green,Blue){ ;not v2 converted
;	oldIntFormat := A_FormatInteger
;	SetFormat, IntegerFast, hex
;	RGB := subStr("0" subStr(Red & 255, 3), -1)
;	. subStr("0" subStr(Green & 255, 3), -1)
;	. subStr("0" subStr(Blue & 255, 3), -1)
;	SetFormat, IntegerFast, %oldIntFormat%
;	return RGB
;}

;#####################################################################################
;Returns boolean. Compares if color in x,y is one in the Colors*  

CompareColor(x,y,Colors*){
	pixelColor := PixelGetColor(X, Y , Mode)
	for i, color in Colors
		if (color=pixelColor)
			Return 1
	Return 0
}

;#####################################################################################
;Gives a similarity score for string A and B


SimilarityScore(stringA, stringB){
	score := 0, searchLength := 0, lengthA := StrLen(stringA), lengthB := StrLen(stringB)
	Loop (lengthA < lengthB ? lengthA : lengthB) * 2 {
		If Mod(A_Index, 2)
			searchLength += 1, needle := "A", haystack := "B"
		Else needle := "B", haystack := "A"
		startAtHaystack := 1, startAtNeedle := 1
		While (startAtNeedle + searchLength <= length%Needle% + 1) {
			searchText := SubStr(string%Needle%, startAtNeedle, searchLength)
			If (pos := InStr(string%Haystack%, searchText, 0, startAtHaystack)) {
				startAtHaystack := pos + searchLength, startAtNeedle += searchLength, score += searchLength**2
				If (startAtHaystack + searchLength > Length%Haystack% + 1)
					Break
			} Else startAtNeedle += 1
	}} Return score / (lengthA > lengthB ? lengthA : lengthB)
}

;#####################################################################################
;Returns the number sequence from haystacks start (Prefix) or end (Suffix)

PrefixNum(haystack){
	prefix:=""
	Loop Parse haystack {
		If A_LoopField is "number"
			prefix .= A_LoopField
		else Break
	} Return prefix
}

SuffixNum(haystack){
	Return SubStr(haystack, RegExMatch(haystack, "\d*$", match))
}

;#####################################################################################
;Returns reversed string

StrRev(str){
	DllCall("msvcrt\_" (A_IsUnicode ? "wcs":"str") "rev", "UInt",&str, "CDecl")
	return str
}

;#####################################################################################
;Returns string with a number of chars removed from the end

SubStrEnd(str,len:=1){
	return SubStr(str,1,StrLen(var)-len)
}

;#####################################################################################
;Returns 1 if "a" is a number otherwise returns 0

IsNumber(a){
	If a=""
		return 0
	If a is "number"
		return 1
	else return 0
}

;#####################################################################################
;Clamps val within min and max

Clamp(val, min, max) {
	If val < min
		val := min
	Else If val > max
		val := max
	Return val
}


a := 100

MsgBox(Clamp(a,10,20))